@page "/inventory/{id}"
@using Microsoft.AspNetCore.Components;
@using System;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@inject IHttpClientFactory ClientFactory
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using Newtonsoft.Json.Linq;

<h1> <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large"/>  Inventory</h1>
<h2>@Email </h2> 
 

@if (_items == null)
{
        <p>Loading...</p>
}

else
{
    <MudTable Items="@_items" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Created Date</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="id">@context.CatalogItemId</MudTd>
            <MudTd DataLabel="Name">@context.name</MudTd>
            <MudTd DataLabel="Description">@context.description</MudTd>
            <MudTd DataLabel="Price">@context.quantity</MudTd>
            <MudTd DataLabel="Created Date">@context.AcquiredDate</MudTd>
         

        </RowTemplate>
    </MudTable>

}


@code {
    private ItemDto[] _items;
    private string Email;
   
   
    [Parameter]
     public  String id { get; set; } 
     private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

        
     
    protected override async Task OnInitializedAsync()
    {

        try
        {
            var client = ClientFactory.CreateClient("frontend2");
            var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
            var user = authState.User;          
           
            _items = await client.GetFromJsonAsync<ItemDto[]>("http://host.docker.internal:5004/items?userId="+ id );
            string source = await client.GetStringAsync("http://host.docker.internal:5002/users/"+ id);
           dynamic data = JObject.Parse(source);
           Email =data.email; 
           
             Console.WriteLine(data.email);
            

            //JsonElement root = doc.RootElement;
            
            

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
           
       


    }


    public class ItemDto
    {
        
        public Guid CatalogItemId { get; set; }
        public string name { get; set; }
        public string description { get; set; }
        public decimal quantity { get; set; }
        public DateTimeOffset AcquiredDate { get; set; }

    }

    public class UserDto
    {
        public string Id { get; set; }
        public string username {get; set; }
        public string Email { get; set; }
         public double Gil { get; set; }
         public string createdDate { get; set; }
    }


}